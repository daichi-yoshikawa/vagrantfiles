# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "bento/ubuntu-18.04"

  config.ssh.password = "vagrant"
  config.ssh.forward_agent = true
  config.vm.define :rvue_node do |rvue_node|
    rvue_node.vm.hostname = "rvue"
    rvue_node.vm.network :forwarded_port, guest:22, host:10022
    rvue_node.vm.network :forwarded_port, guest:80, host:10080
    rvue_node.vm.network :private_network, ip: "192.168.10.100"
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    #   # Customize the amount of memory on the VM:
    vb.memory = "4096"
    vb.cpus = 4
    vb.customize [
      "modifyvm", :id,
      "--vram", "256",
      "--clipboard", "bidirectional",
      "--largepages", "on",
    ]
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     apt-get update
     apt-get install -y build-essential git emacs curl wget less gnome-tweak-tool vim
     apt-get install -y make cmake
     apt-get install -y ubuntu-desktop
     apt-get install -y libopenblas-dev
     apt-get install -y mesa-utils freeglut3-dev
     mkdir -p /home/vagrant/local
     wget -O boost_1_74_0.tar.gz https://sourceforge.net/projects/boost/files/boost/1.74.0/boost_1_74_0.tar.gz/download
     tar zxf boost_1_74_0.tar.gz
     rm boost_1_74_0.tar.gz
     cd boost_1_74_0
     ./bootstrap.sh --prefix=/home/vagrant/local
     ./b2 stage -j8 threading=multi link=shared
     ./b2 install threading=multi link=shared
     cd /home/vagrant
     wget -O eigen-3.3.7.tar.gz https://gitlab.com/libeigen/eigen/-/archive/3.3.7/eigen-3.3.7.tar.gz
     tar zxf eigen-3.3.7.tar.gz
     rm eigen-3.3.7.tar.gz
     cd eigen-3.3.7
     mkdir build
     cd build
     cmake -DCMAKE_INSTALL_PREFIX=/home/vagrant/local ..
     make -j8 install
     cd /home/vagrant
     wget -O yaml-cpp-0.6.3.tar.gz https://github.com/jbeder/yaml-cpp/archive/yaml-cpp-0.6.3.tar.gz
     tar zxf yaml-cpp-0.6.3.tar.gz
     rm yaml-cpp-0.6.3.tar.gz
     cd yaml-cpp-yaml-cpp-0.6.3
     mkdir build
     cd build
     cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/home/vagrant/local ..
     make -j8
     make -j8 install
     cd /home/vagrant
     wget -O ode-0.16.2.tar.gz https://bitbucket.org/odedevs/ode/downloads/ode-0.16.2.tar.gz
     tar zxf ode-0.16.2.tar.gz
     cd ode-0.16.2/build
     cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/home/vagrant/local ..
     make -j8
     make install
     cp -r ../include/drawstuff /home/vagrant/local/include/
     cp libdrawstuff.so /home/vagrant/local/lib/
     mkdir /home/vagrant/local/drawstuff
     cp -r ../drawstuff/textures /home/vagrant/local/drawstuff/
     chown -R vagrant:vagrant /home/vagrant/local
   SHELL
   # echo 'export PATH=$HOME/local/bin:$PATH' >> /home/vagrant/.bashrc
   # echo 'export LD_LIBRARY_PATH=$HOME/local/lib:$LD_LIBRARY_PATH' >> /home/vagrant/.bashrc
end
